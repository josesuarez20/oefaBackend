package pe.gob.oefa.core.context;

import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import pe.gob.oefa.core.security.filter.JWTAuthenticationFilter;
import pe.gob.oefa.core.security.filter.JWTAuthorizationFilter;
import pe.gob.oefa.core.security.util.SecurityUtil;

@EnableWebSecurity
public class SecurityConfig_ extends WebSecurityConfigurerAdapter {

    @Bean
    public BCryptPasswordEncoder bCryptPasswordEncoder() {
        return new BCryptPasswordEncoder();
    }
    
	@Override
	protected void configure(HttpSecurity http) throws Exception {
 
		http.headers().cacheControl();
		
		http.authorizeRequests()
			.antMatchers( SecurityUtil.URL_BASE,SecurityUtil.SIGN_UP_URL,SecurityUtil.VERSION_TABLET_INIT,SecurityUtil.VERSION_TABLET_FIND,SecurityUtil.VERSION_TABLET_SALA_UBICACION)
			.permitAll()
			.anyRequest()
			.authenticated()
			.and()
			.csrf()
			.disable();
		
		http.addFilterBefore(new JWTAuthenticationFilter(SecurityUtil.SIGN_UP_URL,authenticationManager()),UsernamePasswordAuthenticationFilter.class);
		http.addFilter(new JWTAuthorizationFilter(authenticationManager()));
		http.cors();
	}
}
